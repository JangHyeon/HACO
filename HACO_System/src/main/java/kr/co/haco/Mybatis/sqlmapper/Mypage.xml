<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 구현하고자하는 인터페이스 풀경로 -->
<mapper namespace="kr.co.haco.DAO.MypageDAO">
   <!-- 수강내역 -->
   <select id="getMyLecture" resultType="kr.co.haco.VO.MyLectureHistory">
      SELECT l.account_id,l.open_course_id, o.course_name,
         o.center_id, e.location,  o.course_start_date, o.course_end_date,
          IFNULL(le.state_code,-1) AS state_code,
            CASE
                WHEN state_code IS null THEN '평가없음'
                WHEN state_code =1 AND l.is_survey='Y' THEN  '평가활성-평가함'
                WHEN state_code =1 AND l.is_survey='N' THEN '평가활성-평가안함'
                WHEN state_code =0 THEN '평가비활성'
                WHEN state_code =9 THEN '평가CLOSE'
            END AS is_survey,
            CASE
            WHEN o.course_start_date>CURDATE() THEN '미개강'
             <![CDATA[ WHEN o.course_start_date<=CURDATE() AND o.course_end_date>= CURDATE() THEN '수강중' ]]>
             <![CDATA[ WHEN o.course_start_date<CURDATE() AND o.course_end_date< CURDATE()THEN '수강완료' ]]>
         END as now_study
      FROM lecture_register l
        LEFT outer JOIN lecture_evaluation le
         ON l.open_course_id = le.open_course_id
      INNER JOIN open_course o
      ON l.open_course_id = o.open_course_id
      INNER JOIN education_center e
      ON o.center_id = e.center_id
      WHERE l.account_id=#{account_id}
   </select>
   <!-- 강의평가 - 설문내용 불러오기 -->
   <select id="getEvaluationQuestion" resultType="kr.co.haco.VO.EvaluationRegister" parameterType="Integer">
      SELECT q.open_course_id,q.question_id,q.question,q.type_code
      FROM eval_question q
         INNER JOIN lecture_evaluation l
         ON q.open_course_id = l.open_course_id
      WHERE q.open_course_id=#{open_course_id}
   </select>
   <select id="getEvaluationExample" resultType="kr.co.haco.VO.EvaluationRegister" parameterType="Integer">
      SELECT e.example_id, q.question_id, e.example_content
      FROM eval_question q
         INNER JOIN lecture_evaluation l
         ON q.open_course_id = l.open_course_id
         INNER JOIN eval_question_example e
         ON q.question_id = e.question_id
      WHERE q.open_course_id=#{open_course_id}
   </select>
   <!-- 나의 출석정보 -->
   <select id="getattenlist" resultType="kr.co.haco.VO.Attenlist">
    select c.name, d.attendance_date, e.attendance_state_name
            from open_course a, lecture_register b, member c, attendance d, code_attendance e , account f
            where a.open_course_id = b.open_course_id
            and a.open_course_id = d.open_course_id
            and b.account_id = c.account_id
            and b.lecture_register_id = d.lecture_register_id
            and d.attendance_code = e.attendance_code
            and b.account_id = f.account_id
            and f.account_id = #{account_id}
            and a.open_course_id = #{open_course_id}
   </select>
   <!-- 강의평가 - 설문내용 저장하기 -->   
   <!-- 설문 완료 flag처리 -->
   <update id="setIsSurvey">
      update lecture_register set is_survey='Y' 
      where account_id=${param1} and open_course_id=${param2}
   </update>
   <!-- 주관식 일때 -->
   <insert id="uploadEvalAnswer" parameterType="kr.co.haco.VO.EvalQuestionAnswer">
      INSERT INTO eval_question_answer(question_id,answer,account_id) 
      VALUES(#{question_id},#{answer},#{account_id})
   </insert>
   <!-- 객관식 일때 --> 
   <insert id="uploadEvalExam" parameterType="kr.co.haco.VO.EvalExampleResult">
      INSERT INTO eval_example_result(open_course_id,question_id,example_id,account_id)
      VALUES(#{open_course_id},#{question_id},#{example_id},#{account_id})
   </insert>
</mapper>



