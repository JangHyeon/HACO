<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 구현하고자하는 인터페이스 풀경로 -->
<mapper namespace="kr.co.haco.DAO.AccountDAO">
	<!-- id명은 인터페이스가 구현하는 메서드명 -->
	<!-- resultType은 랩퍼클래스 타입 -->
	<select id="getRoleList" resultType="kr.co.haco.VO.Roles">
		select role_name, role_desc, create_date from roles
	</select>
		
	<select id="getEmployee" parameterType="Integer" resultType="kr.co.haco.VO.Employee">
		select 
		account_id,job_code,name_kor,name_eng,gender,address_registered,address_real,phone_home,phone_cell,
		phone_emergency,email,salary,bank,bank_account,account_owner,join_date,join_center_id,photo,
		resident_registration_num1,resident_registration_num2,now_center_id,location 
		from 
		employee as e 
		join education_center as ec 
		on e.now_center_id = ec.center_id 
		where account_id=#{param1}
	</select>
	
	<!-- 아이디 중복 체크 -->
	<select id="checkId" parameterType="String" resultType="String">
		select account_id from account where id=#{param1}
	</select>
	
	<select id="getEmployeeID" parameterType="Integer"
		resultType="kr.co.haco.VO.Employee">
		select account_id from employee where name_kor like
		#{param1}
	</select>
	<select id="getLastInsertId" resultType="Integer">
		SELECT LAST_INSERT_ID()
	</select>
	
	<!-- 계정 등록 -->
	<insert id="insertAccount" parameterType="kr.co.haco.VO.Account">
		insert into account(id,password,activation_key) values(#{id},#{password},#{activation_key});
	</insert>
	
	<!-- 계정 권한 등록 -->
	<insert id="insertAuthority" parameterType="kr.co.haco.VO.Authority">
		insert into authority values(#{account_id},#{role_name});
	</insert>
	
	<!-- 회원 정보 등록 -->
	<insert id="insertMember" parameterType="kr.co.haco.VO.Member">
		insert into member(account_id,name,email,phone,zipcode,address,address_detail,company,position,job_duty) 
		values(#{account_id},#{name},#{email},#{phone},#{zipcode},#{address},#{address_detail},#{company},#{position},#{job_duty});
	</insert>
	
	<!-- 계정 정보 -->
	<select id="getAccount" resultType="kr.co.haco.VO.Account" parameterType="kr.co.haco.VO.Account">
		select account_id,state_code,id,password,create_date,activation_key from account 
		<where>
			<if test="account_id != 0">AND account_id=#{account_id}</if>
			<if test="activation_key != null and activation_key != ''">AND activation_key=#{activation_key}</if>
			<if test="id != null and id != ''">AND id=#{id}</if>
		</where>
	</select>
	
	<!-- 계정 활성화 -->
	<update id="accountActivation">
		update account SET state_code=1 where activation_key=#{activation_key}
	</update>
	
	<!-- 회원 정보 -->
	<select id="getMember" parameterType="kr.co.haco.VO.Member" resultType="kr.co.haco.VO.Member">
		select account_id,name,zipcode,address,address_detail,email,phone,company,position,job_duty,create_date from member 
		<where>
			<if test="account_id != 0">AND account_id=#{account_id}</if>
			<if test="name != null and name != ''">AND name=#{name}</if>
			<if test="email != null and email != ''">AND email=#{email}</if>
		</where>
	</select>
	
	<!-- 계정 수정 -->
	<update id="updateAccount" parameterType="kr.co.haco.VO.Account">
		update account
		<set>
			<if test="id != null and id != ''">id=#{id},</if>
			<if test="password != null and password != ''">password=#{password},</if>
		</set>
		where account_id=#{account_id}
	</update>
	
	<!-- 회원 수정 -->
	<update id="updateMember" parameterType="kr.co.haco.VO.Member">
		update member
		<set>
			<if test="name != null and name != ''">name=#{name},</if>
			<if test="zipcode != null and zipcode != ''">zipcode=#{zipcode},</if>
			<if test="address != null and address != ''">address=#{address},</if>
			<if test="address_detail != null and address_detail != ''">address_detail=#{address_detail},</if>
			<if test="email != null and email != ''">email=#{email},</if>
			<if test="phone != null and phone != ''">phone=#{phone},</if>
			<if test="company != null and company != ''">company=#{company},</if>
			<if test="position != null and position != ''">position=#{position},</if>
			<if test="job_duty != null and job_duty != ''">job_duty=#{job_duty},</if>
		</set>
		where account_id=#{account_id}
	</update>
	
	<!-- 회원 탈퇴(계정) -->
	<update id="disableAccount" parameterType="kr.co.haco.VO.Account">
		update account SET state_code=0, id=#{id} where account_id=#{account_id} AND password=#{password}
	</update>
	
	<!-- 
	<insert id="insert" parameterType="kr.or.kosta.vo.Notice">
		<selectKey order="BEFORE" keyProperty="seq" resultType="String">
			SELECT NVL(MAX(TO_NUMBER(SEQ),0)+1 FROM TNOTICES
		</selectKey>
		INSERT INTO TNOTICES(SEQ, TITLE, CONTENT, WRITER, REGDATE, HIT, FILESRC , FILESRC2) 
		VALUES(#{seq}, #{title}, #{content}, #{writer}, SYSDATE, 0, #{fileSrc} , #{fileSrc2})
	</insert>
	 -->
	
    <!-- 동적쿼리 .... 조별로 테스트 
    <select id="totalSearch" resultType="kr.co.MiOhRecipe.dto.RecipeDto">
		SELECT RECIPENO, CATEGORYNO, FOODNO, TITLE, USERID, CONTENT, REGDATE, RECIPEIMAGE, HIT, GOOD, PRODUCTNO, VIDEONAME, RESTAURANTADDR
		FROM RECIPEBOARD
		<where>
			<if test="param2 == 2">
				categoryNo IN(2,3,4)
			</if>
    		  <if test="param2 == 3">
				categoryNo IN(5,6)
			</if>
     		 <if test="param2 == 4">
				categoryNo IN(7,8)
			</if>
			<if test="param1 != null">
				and (title LIKE '%${param1}%' OR content LIKE '%${param1}%')
			</if>
		</where> 		
		ORDER BY RECIPENO desc
	</select>
    
    -->
 	
 
</mapper>