<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:security="http://www.springframework.org/schema/security" 
	xsi:schemaLocation="http://www.springframework.org/schema/mvc 
	http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security-3.2.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">


	<!-- 보안 어노테이션 -->
	<security:global-method-security pre-post-annotations="enabled" />

	<!-- ※중요※ Annotation사용시 필수 (주석을 통한 DI 설정) -->
	<context:annotation-config/>

	<!-- 빈 설정파일에 아래와 같은 구문을 추가하면, 클래스와 메소드에 @Transactional 애노테이션을 사용할 수 있다. -->	
	<tx:annotation-driven />

	
	<!-- 사용하고자 하는 컨버터의 빈을 설정 파일에 등록하여야 하는데, 
	대부분의 메시지 컨버터 빈들은 <mvc:annotation-driven> 전용태그를 통하여 자동등록 된다. 
	물론 관련 라이브러리들은 클래스 패스에 존재하여야 한다. -->
	<mvc:annotation-driven></mvc:annotation-driven>
	
	<!-- 
	//MessageConverter 의 종류//
	StringHttpMessageConverter
	FormHttpMessageConverter
	ByteArrayMessageConverter
	MarshallingHttpMessageConverter
	MappingJacksonHttpMessageConverter
	SourceHttpMessageConverter
	BufferedImagedHttpMessageConverter
	Jaxb2RootElementHttpMessageConverter
	RssChannelHttpMessageConverter
	 -->
	
	<!-- 컨트롤러/컴포넌트 스캔 -->	
	<context:component-scan base-package="kr.co.haco.Controller  
										kr.co.haco.Service" />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- 리소스 경로 예외 처리 -->
	<mvc:resources mapping="/resources/**" location="/resources/" />
	<mvc:resources mapping="/images/**" location="/resources/images/" />
	<mvc:resources mapping="/employeePhoto/**" location="/resources/upload/employeePhoto/" />
	<mvc:resources mapping="/profilePhoto/**" location="/resources/upload/profilePhoto/" />
	<mvc:resources mapping="/board/**" location="/resources/upload/board/" />
		
	
	<!-- Tiles 설정 코드 START -->
	<bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/views/Haco-Tiles.xml</value>
			</list>
		</property>
	</bean>
	<bean id="urlBasedViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView" />
	</bean>
	<!-- Tiles 설정 코드 END -->
	
	<!-- InternalResourceViewResolver a.jsp , b.jsp 파일view 구성하기 -->
	<!-- Tiles 적용예외 파일 처리 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/"></property>
		<property name="suffix" value=".jsp"></property></bean>
</beans>
